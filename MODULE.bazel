module(
    name = "yatws",
    version = "0.0.0",
    compatibility_level = 1,
)

########## PYTHON
bazel_dep(name = "rules_python", version="1.0.0")
# This only configures the python used during build. Use `py_runtime` for the executable.
python = use_extension("@rules_python//python/extensions:python.bzl", "python")

# This must be set to the system python version, because rules_rust uses the system python.
kPythonVersion = "3.12"
python.toolchain(python_version = kPythonVersion, is_default = True)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
# Merge it with requirements.txt into requirements_lock.txt
# bazel run requirements.update
pip.parse(
    hub_name = "yatws_pip_deps",
    python_version = kPythonVersion,
    requirements_lock = "//:requirements_lock.txt",
)
use_repo(pip, "yatws_pip_deps")

########## RUST
bazel_dep(name = "rules_rust", version = "0.59.2")
rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
# Pick one that works from here: https://releases.rs/
rust.toolchain(edition = "2021", versions = ["1.86.0"])
use_repo(rust, "rust_toolchains")
register_toolchains("@rust_toolchains//:all")
# To update, run `bazel run @rules_rust//tools/rust_analyzer:gen_rust_project`.
rust_analyzer = use_extension("@rules_rust//tools/rust_analyzer:deps.bzl", "rust")
rust_analyzer.rust_analyzer_dependencies()

# Required by crates_io_api.
crate = use_extension("@rules_rust//crate_universe:extensions.bzl", "crate")

crate.spec(package = "thiserror", version = "2.0.12")
crate.spec(package = "chrono", version = "0.4.39", features = ["std", "serde"])
crate.spec(package = "chrono-tz", version = "0.10.1")
crate.spec(package = "glob", version = "0.3.2")
crate.spec(package = "pyo3", version = "0.23.5", features = ["extension-module"])
crate.spec(package = "serde", version  = "1.0.218", features = ["derive"])
crate.spec(package = "serde_json", version = "1.0.140", features = ["raw_value"])
crate.spec(package = "rusqlite", version = "0.34.0", features = ["vtab", "functions", "window", "blob", "bundled", "rusqlite-macros"])
crate.spec(package = "futures", version = "0.3.31")
crate.spec(package = "parking_lot", version = "0.12.3")
crate.spec(package = "async-trait", version = "0.1.88")
crate.spec(package = "lazy_static", version = "1.5.0")
crate.spec(package = "uuid", version = "1.16.0", features = ["v4"])
crate.spec(package = "bincode", version = "1.3")
crate.spec(package = "env_logger", version = "0.11.6")
crate.spec(package = "log", version = "0.4.26")
crate.spec(package = "once_cell", version = "1.21.3")
crate.spec(package = "num-traits", version = "0.2.19")
crate.spec(package = "time", version = "0.3.39", features = ["macros", "parsing", "serde", "serde-human-readable"])
crate.spec(package = "tokio", version = "1.43.0", features = ["full"])
crate.spec(package = "tokio-test", version = "0.4.4")
crate.spec(package = "mockall", version = "0.13.1")
crate.spec(package = "serial_test", version = "3.2.0")
crate.spec(package = "tempfile", version = "3.19.1")
crate.spec(package = "clap", version = "4.5.31", features = ["derive"])
crate.spec(package = "byteorder", version = "1.5.0")
crate.from_specs()
use_repo(crate, "crates")
